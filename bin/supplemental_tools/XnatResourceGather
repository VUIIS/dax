#!/usr/bin/env python

from dax import XnatUtils
import argparse
import json


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--proj', dest='project', help='Project name', required=True)
    parser.add_argument('--subj', dest='subject', help='Subject ID', required=True)
    parser.add_argument('--sess', dest='session', help='Session ID', required=True)
    return parser


if __name__ == '__main__':
    PARSER = parse_args()
    OPTIONS = PARSER.parse_args()

    project = OPTIONS.project
    subject = OPTIONS.subject
    session = OPTIONS.session

    # Get assessor list given proj/subj/sess
    with XnatUtils.get_interface() as xnat:
        assessors = xnat.get_assessors(project,subject,session)

    assess_dict = {}

    # Loop through assessors
    for assessor in assessors:
        assessor_string = xnat.get_assessor_path(project,subject,session,assessor['assessor_label'])
        assessor_obj = xnat.select(assessor_string)

        # Split assessor_obj string for printing
        assess = str(assessor_obj)
        assess = assess.split(' ')

        # Gather assessor inputs
        inputs = XnatUtils.get_assessor_inputs(assessor_obj)

        scan_dict = {}
        if inputs:
            for x,y in inputs.items():
                val = y.split('/')
                typ = str(val[7:8])
                typ = typ.strip("[']")
                scas = str(val[8:]).strip("[']")
                scan_dict.update({typ+"_"+scas: scas})

        assess_dict.update({assess[2]: scan_dict})

    data = {
        project: {
            subject: {
                session: {
                    'Assessor': assess_dict
                }
            }
        }
    }

    print(data)
