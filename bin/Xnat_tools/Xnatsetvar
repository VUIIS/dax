#!/usr/bin/env python
'''Set variables on XNAT objects from a CSV file.

The optional -o/--outfile argument may be used to write logging information
to file instead of the terminal.

No effort is made to identify duplicate or erroneous entries in the CSV file.

Scan 'quality' workflow

    1.  Create a CSV file containing these labeled columns (in no particular order):
            project_id,subject_label,session_label,as_label,quality
        The as_label column must contain the scan label.

        A starting point for the CSV may be obtained using 
            Xnatreport -p <project> -c <csvfile> --format project_id,subject_label,session_label,scan_id,quality
        The date header line and the blank header line must be removed, and the 
        scan_id column must be renamed to as_label.

        Alternatively, the download_report.csv produced by Xnatdownload may be 
        used as a starting point. The date header line must be removed. The
        quality column is already present and may be edited.

    2.  Edit the 'quality' column of the CSV file to the desired values

    3.  Run this script:
            Xnatsetvar --var quality --csv <edited_csvfile>

Assessor 'qc_status' workflow

    Same as the scan quality workflow, but the required CSV columns are
        project_id,subject_label,session_label,as_label,qc_status
    and the as_label column must contain the assessor label.

    Xnatsetvar --var qc_status --csv <edited_csvfile>

    The optional argument --validator may be used to set the 
    assessor's 'validated_by' field. It defaults to 'Xnatsetvar'.

Session 'session_type' workflow

    Same as the scan quality workflow, but the required CSV columns are
        project_id,subject_label,session_label,session_type

    Xnatsetvar --var session_type --csv <edited_csvfile>
'''

import argparse
from dax import XnatUtils
import logging
import pandas
import sys
import time


def initialize_logger(name, logfile):
    if logfile:
        handler = logging.FileHandler(logfile, 'w')
    else:
        handler = logging.StreamHandler()
    logger = logging.getLogger(name)
    logger.setLevel(logging.INFO)
    logger.addHandler(handler)
    return logger


def read_csv(csvfile, reqs):
    info = pandas.read_csv(csvfile,  delimiter=',', dtype=str)
    for req in reqs:
        if not req in info.columns:
            raise Exception(f'Column "{req}" not found in CSV file')
    return info


def set_scanqual(csv):
    
    # Load the info csv
    reqs = [
        'project_id',
        'subject_label',
        'session_label',
        'as_label',
        'quality',
        ]
    info = read_csv(csv, reqs)

    # Set values for scans that exist
    with XnatUtils.get_interface() as xnat:
        for r in info.itertuples():
            scan = xnat.select_scan(
                r.project_id,
                r.subject_label,
                r.session_label,
                r.as_label
                )
            tag = f'{r.project_id}, {r.subject_label}, {r.session_label}, {r.as_label}'
            if scan.exists():
                scan.attrs.set('quality',r.quality)  
                logger.info(f'Set {r.quality} for {tag}')    
            else:
                logger.warning(f'Scan not found: {tag}')


def set_assrqc(csv, validator):
    
    # Load the info csv
    reqs = [
        'project_id',
        'subject_label',
        'session_label',
        'as_label',
        'qc_status',
        ]
    info = read_csv(csv, reqs)

    # Set values for assessors that exist
    datestr = time.strftime('%Y-%m-%d')
    with XnatUtils.get_interface() as xnat:
        for r in info.itertuples():
            assr = xnat.select_assessor(
                r.project_id,
                r.subject_label,
                r.session_label,
                r.as_label
                )
            tag = f'{r.project_id}, {r.subject_label}, {r.session_label}, {r.as_label}'
            if assr.exists():
                assr.attrs.mset({
                    'proc:genProcData/validation/status': r.qc_status,
                    'proc:genProcData/validation/date': datestr,
                    'proc:genProcData/validation/validated_by': validator
                })
                logger.info(f'Set {r.qc_status} for {tag}')
            else:
                logger.warning(f'Assessor not found: {tag}')


def set_sesstype(csv):
    
    # Load the info csv
    reqs = [
        'project_id',
        'subject_label',
        'session_label',
        'session_type',
        ]
    info = read_csv(csv, reqs)

    # Set values for sessions that exist
    with XnatUtils.get_interface() as xnat:
        for r in info.itertuples():
            sess = xnat.select_experiment(
                r.project_id,
                r.subject_label,
                r.session_label
                )
            tag = f'{r.project_id}, {r.subject_label}, {r.session_label}'
            if sess.exists():
                sess.attrs.set('session_type',r.session_type)  
                logger.info(f'Set {r.session_type} for {tag}')    
            else:
                logger.warning(f'Session not found: {tag}')


if __name__ == '__main__':

    # Arguments
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawTextHelpFormatter
        )
    parser.add_argument('-v', '--var', required=True)
    parser.add_argument('-c', '--csv', required=True)
    parser.add_argument('--validator', default='Xnatsetvar')
    parser.add_argument('-o', '--outfile', default=None)
    args = parser.parse_args()

    # Logging
    logger = initialize_logger('Xnatsetvar', args.outfile)

    # Call appropriate routine
    if args.var=='quality':
        set_scanqual(args.csv)
    elif args.var=='qc_status':
        set_assrqc(args.csv, args.validator)
    elif args.var=='session_type':
        set_sesstype(args.csv)
    else:
        raise Exception(f'Variable type {args.var} is not handled')

