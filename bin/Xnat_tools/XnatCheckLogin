#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
Created on Jan 24, 2013
Edited on February 26,2015

@author: yvernabc
'''

import os
import sys
import getpass
from dax import XnatUtils
from datetime import datetime

########### INSTALL FUNCTIONS ###########
#add to .xnat_setup
def add_to_workstation(line, comments):
    """
    Method to add variables to your workstation (xnat_profile file)
     #comments
     line

    :param line: string to write the bash command in your profile file
    :param comments: comments associated to the line
    :return: None
    """
    #.xnat_profile path
    profile_path = os.path.join(os.environ['HOME'], '.xnat_profile')
    if comments[1] != '#':
        comments = '#%s' % (comments)
    #If no xnat_profile, create it and add to bash_profile the call for it
    if not os.path.exists(profile_path):
        init_profile(profile_path)
    #add the line and comments:
    if not line in open(profile_path).read():
        with open(profile_path,"a") as bashrc:
            bashrc.write(comments+'\n')
            bashrc.write(line+'\n')

def init_profile(profile_path):
    """
    Method to init your profile file to call xnat_profile

    :param profile_path: path to your profile file
    :return: None
    """
    comments= '###### XNAT CONFIGURATION FILE ######\n#File running every time you open a new terminal (called by .bash_profile) : created by XnatCheckLogin on '+str(datetime.now())+'\n'
    #Create the file:
    with open(profile_path,"w") as bashrc:
        bashrc.write(comments+'\n')

    #link the file in the bashrc or profile
    bash_profile_path=os.environ['HOME']+'/.bash_profile'
    #Add the line in bash_profile
    if os.path.exists(bash_profile_path):
        if not 'source ~/.xnat_profile' in open(bash_profile_path).read():
            with open(bash_profile_path, "a") as bash_profile:
                bash_profile.write("#call for .xnat_profile files containing xnat logins: \n")
                bash_profile.write("source ~/.xnat_profile\n")

def check_env(env_variable,encrypted=False):
    """
    Method to check the environment variable

    :param env_variable: path to your profile file
    :param encrypted: need to be hidden when asking user for value (password)
    :return: value of the environment variable if found
             ask user if not found
    """
    if env_variable in os.environ:
        if encrypted: print ' * '+env_variable+' found in your environment variables.'
        else: print ' * '+env_variable+' found in your environment variables: '+os.environ[env_variable]
        return os.environ[env_variable]
    else:
        print ' * '+env_variable+' not found.'
        if encrypted:
            return getpass.getpass(prompt='  --> Enter '+env_variable+':')
        else:
            if env_variable=='XNAT_HOST':
                value=raw_input('  --> Enter '+env_variable+' (enter "default" for Vanderbilt XNAT):')
                if value=="default":
                    return 'http://xnat.vanderbilt.edu:8080/xnat'
                else:
                    return value
            else:
                return raw_input('  --> Enter '+env_variable+':')

def set_xnat_variables():
    """
    Method to set the xnat variables and
     see if the connection works with the logins
     set the variables in xnat_profile if not in env variables

    :return: None
    """
    print 'INFO: Checking XNAT variables:'
    # XNAT_HOST URL
    XNAT_HOST=check_env('XNAT_HOST')
    # XNAT_USER username
    XNAT_USER=check_env('XNAT_USER')
    # XNAT_PASS password
    XNAT_PASS=check_env('XNAT_PASS',encrypted=True)
    print "INFO: Trying to open a connection with XNAT with your login..."
    #Check that the the user can open a connection to XNAT and close it
    #connection
    from pyxnat import Interface
    xnat=Interface(XNAT_HOST,XNAT_USER,XNAT_PASS)
    try:
        #check connection
        _ = XnatUtils.list_projects(xnat)
        xnat.disconnect()
        print ' -->Good login.'
    except:
        print ' --> error: Wrong login.'
        print ' *Try typing them again:'
        XNAT_HOST = raw_input("  --> XNAT_HOST: ")
        XNAT_USER = raw_input("  --> XNAT_USER: ")
        XNAT_PASS = getpass.getpass(prompt='  --> XNAT_PASS:')
        xnat=Interface(XNAT_HOST,XNAT_USER,XNAT_PASS)
        try:
            #check connection
            _ = XnatUtils.list_projects(xnat)
            xnat.disconnect()
            print '  -->Good login.'
        except:
            print '  --> error: Wrong login.'
            solution="""To check if you have the good login, follow these steps:
    1) Check on XNAT that you are typing the good information (Username/Password)
    2) Check on your system the value that are set with this command:
       echo $XNAT_USER
       echo $XNAT_PASS
       if the values are wrong, edit your configuration file (either: .xnat_profile or .profile or .bashrc)
    3) close your terminal, open it again and run XnatCheckLogin one more time.
=================================================================================
            """
            print solution
            sys.exit()

    #Send to the .xnat_profile
    if not 'XNAT_HOST' in os.environ or not 'XNAT_USER' in os.environ or not 'XNAT_PASS' in os.environ:
        print "INFO: Setting your XNAT variables to .xnat_profile"
        add_to_workstation('export XNAT_HOST='+XNAT_HOST,"#Xnat host address")
        print " *XNAT_HOST set up in ~/.xnat_profile"
        add_to_workstation('export XNAT_USER='+XNAT_USER,"#Xnat username")
        print " *XNAT_USER set up in ~/.xnat_profile"
        add_to_workstation('export XNAT_PASS='+XNAT_PASS,"#Xnat password")
        print " *XNAT_PASS set up in ~/.xnat_profile"

        print "WARNING: Please run the configuration file .xnat_profile:  'source ~/.xnat_profile'  to apply the changes or open a new terminal."

def parse_args():
    """
    Method to parser arguments following ArgumentParser

    :return: arguments parsed
    """
    from argparse import ArgumentParser
    ap = ArgumentParser(prog='Xnatsetup', description="Set and Check the logins for XNAT.")
    return ap.parse_args()

if __name__ == '__main__':
    args = parse_args()
    print '================================================================================='
    set_xnat_variables()
    print '================================================================================='
